# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


# I have the following auth state setup: 
# - auth context with two custom hooks that help us read values from context objects without having to call useContext hook in every component. They also do error handling.
# - import initial state that we pass to useReducer in AutthProvider to help us manage the auth state
# - the useReducer returns a user object as state and a dispatch method for triggering state updates/changes, then we pass the user object to as value AuthStateContext provider also we pass the dispatch method as value to the AuthDispatchContext provider.
# -----------------------------------------------------------------------------------------------------------------------------------------------------
# - auth reducer where we first define the initial state 
# - we write AuthReducer where we define action types and state changes in response to those action types 
# - in reducer we are covering all promise states: pending, fulfilled, rejected
# - AuthReducer is reducer function that will be used by the useReducer state hook. It is a function that accepts an initialState and an action object({type: “ACTION_TYPE”}) as arguments and then returns a new state based on the action type specified
# -------------------------------------------------------------------------------------------------------------
# - auth service where we define functions - those functions dispatch multiple state updates as a result of an Http request or side-effect (login, logout, register)
# - we export those functions and import them in components. We call them passing them dispatch method and optionally user data as a second parameter